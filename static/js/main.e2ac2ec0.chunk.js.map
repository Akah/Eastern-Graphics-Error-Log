{"version":3,"sources":["components/error/Error.tsx","logProcessor.ts","components/errorlog/ErrorLog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Error","props","Object","values","error","map","value","process","arr","Map","forEach","obj","message","notHash","has","innerObj","get","set","appendMessage","jsonArray","key","push","mapToObject","processedLog","errors","data","ErrorLog","useState","errorLog","setErrorLog","criteria","setCriteria","className","colSpan","onChange","e","target","disabled","hidden","undefined","filteredLog","filter","includes","placeholder","scope","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"isyFAmBeA,G,MAZqB,SAACC,GACjC,OACI,4BAEQC,OAAOC,OAAOF,EAAMG,OAAOC,KAAI,SAACC,GAC5B,OAAO,4BAAI,2BAAIA,U,OCsBpBC,MAlCf,SAAiBC,GAEb,IAAIH,EAAM,IAAII,IAcd,OAZAD,EAAIE,SAAQ,SAACC,GACT,IAAIC,EAAkBD,EAAG,QACrBE,EAAkBF,EAAG,SAAaA,EAAG,MAAUA,EAAG,UAElDN,EAAIS,IAAID,GAYpB,SAAuBR,EAAoBQ,EAAiBD,GACxD,IAAIG,EAAgBV,EAAIW,IAAIH,GAC5BE,EAAQ,SAAe,KAAOH,EAC9BP,EAAIY,IAAIJ,EAASE,GAdTG,CAAcb,EAAKQ,EAASD,GAE5BP,EAAIY,IAAIJ,EAASF,MAe7B,SAAsBN,GAClB,IAAIc,EAAsB,GAI1B,OAHAd,EAAIK,SAAQ,SAACJ,EAAOc,GAChBD,EAAUE,KAAKf,MAEZa,EAfAG,CAAYjB,ICVjBkB,G,MAAehB,EAAQiB,EAAOC,OAkErBC,EAhEY,WAAO,IAAD,EACGC,mBAASJ,GADZ,mBACtBK,EADsB,KACZC,EADY,OAEGF,mBAAS,WAFZ,mBAEtBG,EAFsB,KAEZC,EAFY,KAqB7B,OACI,yBAAKC,UAAU,aACX,2BAAOA,UAAU,6CACb,2BAAOA,UAAU,eACb,4BACI,wBAAIC,QAAS,GACT,yBAAKD,UAAU,YACX,yBAAKA,UAAU,YACX,4BAAQA,UAAU,eAAeE,SAdpC,SAACC,GACH,KAAnBA,EAAEC,OAAO9B,OACTyB,EAAYI,EAAEC,OAAO9B,SAaO,4BAAQA,MAAM,GAAG+B,UAAQ,EAACC,QAAM,GAAhC,mBACA,2CACA,4CACA,yCACA,+CAGR,yBAAKN,UAAU,YACX,2BAAOA,UAAU,eAAeE,SAlCrC,SAACC,GACxB,GAAuB,KAAnBA,EAAEC,OAAO9B,OAAoC,OAAnB6B,EAAEC,OAAO9B,YAAqCiC,IAAnBJ,EAAEC,OAAO9B,MAC9DuB,EAAYN,OACT,CACH,IAAIiB,EAAcZ,EAASa,QAAO,SAAC9B,GAC/B,OAAOA,EAAImB,GAAUY,SAASP,EAAEC,OAAO9B,UAE3CuB,EAAYW,KA2B0EG,YAAY,kBAK1F,4BACI,wBAAIC,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,eAGR,+BAEQhB,EAASvB,KAAI,SAACC,GACV,OAAO,kBAAC,EAAD,CAAOF,MAAOE,WC/ClCuC,G,MAVO,WAEpB,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,SCIcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e2ac2ec0.chunk.js","sourcesContent":["import React from 'react';\nimport './Error.css';\n\ninterface ErrorProps {\n    error: object;\n}\n\nconst Error: React.FC<ErrorProps> = (props) => {\n    return (\n        <tr>\n            {\n                Object.values(props.error).map((value) => {\n                    return <td><p>{value}</p></td>\n                })\n            }\n        </tr>\n    );\n}\n\nexport default Error;","function process(arr: object[]) {\n\n    let map = new Map();\n\n    arr.forEach((obj: any) => {\n        let message: string = obj[\"message\"];\n        let notHash: string = obj[\"facility\"]+obj[\"level\"]+obj[\"timeStamp\"];\n    \n        if (map.has(notHash)) {\n            appendMessage(map, notHash, message);\n        } else {\n            map.set(notHash, obj)\n        }\n\n    });\n\n    return mapToObject(map);\n\n}\n\nfunction appendMessage(map: Map<any, any> ,notHash: string, message: string) {\n    let innerObj: any = map.get(notHash);\n    innerObj[\"message\"] += \"\\n\" + message;\n    map.set(notHash, innerObj);\n}\n\nfunction mapToObject (map: Map<any, any>) {\n    let jsonArray: object[] = [];\n    map.forEach((value, key) => {\n        jsonArray.push(value);\n    });\n    return jsonArray; \n}\n\nexport default process;\n\n","import React, {useState}  from 'react';\nimport Error    from '../error/Error';\nimport errors   from '../../errors.json';\nimport process  from '../../logProcessor';\nimport '../../bootstrap.min.css';\n\nconst processedLog = process(errors.data);\n\nconst ErrorLog: React.FC = () => {\n    const [errorLog, setErrorLog] = useState(processedLog);\n    const [criteria, setCriteria] = useState(\"message\");\n\n    const handleSearchChange = (e: any) => {\n        if (e.target.value === \"\" ||  e.target.value === null || e.target.value === undefined) {\n            setErrorLog(processedLog);\n        } else {\n            let filteredLog = errorLog.filter((obj:any) => {\n                return obj[criteria].includes(e.target.value);\n            });\n            setErrorLog(filteredLog);\n        }\n    }\n\n    const handleCriteriaChange = (e:any) => {\n        if (e.target.value !== \"\") {\n            setCriteria(e.target.value);\n        }\n    }\n\n    return (\n        <div className=\"error-log\">\n            <table className=\"table table-hover table-bordered table-sm\">\n                <thead className=\"thead-light\">\n                    <tr>\n                        <th colSpan={4}>\n                            <div className=\"form-row\">\n                                <div className=\"col-md-2\">\n                                    <select className=\"form-control\" onChange={handleCriteriaChange}>\n                                        <option value=\"\" disabled hidden>Select Criteria</option>  \n                                        <option>message</option>\n                                        <option>facility</option>\n                                        <option>level</option>\n                                        <option>timeStamp</option>\n                                    </select>\n                                </div>\n                                <div className=\"col-md-4\">\n                                    <input className=\"form-control\" onChange={handleSearchChange} placeholder=\"Search...\"></input>\n                                </div>\n                            </div>\n                        </th>\n                    </tr>\n                    <tr>\n                        <th scope=\"col\">Message</th>\n                        <th scope=\"col\">Facility</th>\n                        <th scope=\"col\">Level</th>\n                        <th scope=\"col\">Timestamp</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        errorLog.map((value:any) => {\n                            return <Error error={value}></Error>\n                        })\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n\n    \n}\n\nexport default ErrorLog;","import React    from 'react';\nimport ErrorLog from './components/errorlog/ErrorLog';\nimport './App.css';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <ErrorLog></ErrorLog>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}